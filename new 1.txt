
        void identifySubgraphs()
        {

            Debug.Log("Identify Subgraphs... for node count of " + graph.nodes.Count);
            for (var i = 0; i < graph.nodes.Count; i++)
            {
                /* if (graph.nodes[i].connectedNodes.Count == 0)
                 {
                     graph.nodes.RemoveAt(i);
                     Debug.Log("delete " + i);
                     i--;
                 }*/
            }
            for (var i = 0; i < graph.nodes.Count; i++)
            {
                graph.nodes[i].graphNumber = -1;
            }
            Material curMaterial = mat;
            var nodesToCheck = new Stack<int>();
            var graphNumber = 1;
            Color randColor = mat.color;
            for (var i = 0; i < graph.nodes.Count; i++)
            {
                var n = graph.nodes[i];
                if (n.graphNumber < 1)
                {

                    nodesToCheck.Push(i);
                    countNodesInGraph.Add(0);

                    while (nodesToCheck.Count > 0)
                    {
                        countNodesInGraph[countNodesInGraph.Count - 1]++;

                        var currNode = nodesToCheck.Pop();
                        if (graph.nodes[currNode].nodeObject == null)
                        {
                            Debug.Log(currNode + " " + graph.nodes[currNode].id + " " + graph.nodes[currNode].label);
                        }
                        graph.nodes[currNode].graphNumber = graphNumber;
                        graph.nodes[currNode].nodeObject.GetComponent<MeshRenderer>().sharedMaterial = curMaterial;
                        graph.nodes[currNode].nodeObject.GetComponent<MeshRenderer>().sharedMaterial.color = randColor;

                        for (var j = 0; j < graph.nodes[currNode].connectedNodes.Count; j++)
                        {
                            var u = graph.nodes[currNode].connectedNodes[j];
                            if (graph.nodes[u].graphNumber < 1)
                            {
                                nodesToCheck.Push(u);
                            }
                        }



                    }
                    graphNumber++;
                    curMaterial = new Material(curMaterial);
                    randColor = Random.ColorHSV();

                }
            }
            Debug.Log("subgraphs found: " + (graphNumber - 1));
            //  foreach (var n in countNodesInGraph) Debug.Log(n+"nodes in Subgraph");

        }




        public void CalculateSubgraph()
        {
            for (int i = 0; i < graph.nodes.Count; ++i)
            {
                graph.nodes[i].pos = graph.nodes[i].nodeObject.transform.localPosition;
            }

            if (Aura != null) GameObject.Destroy(Aura);
            Debug.Log(graph.nodes.Count + " looking for " + graph.latestSelection);
            if (graph.latestSelection >= graph.nodes.Count || graph.latestSelection == -1)
                return;

            //remove this for coq
            if (!IsCoq) FoundNodes.Clear();
            if (FoundNodes.Count == 0) FoundNodes.Add(graph.nodes[graph.latestSelection]);

            foreach (var node in FoundNodes)
            {


                Debug.Log(graph.subGraphOrign);
                //var node = graph.nodes[graph.latestSelection];

                //deactivate
                if (graph.subGraphOrign == graph.latestSelection)
                {
                    GameObject.Destroy(graph.subObject);
                    //for aura?
                    //GameObject.Destroy(node.nodeObject.transform.GetChild(1).gameObject);

                    graph.subGraphOrign = -1;
                    graph.edgeObject.SetActive(true);
                }

                else
                {

                    if (graph.subObject != null)
                    {
                        GameObject.Destroy(graph.subObject);
                        //TODO: destroy old aura
                        // GameObject.Destroy(node.nodeObject.transform.GetChild(1).gameObject);
                    }


                    graph.edgeObject.SetActive(false);
                    graph.subGraphOrign = node.nr;
                    Debug.Log(node.label);
                    List<int> edgesIn = new List<int>();
                    List<int> edgesOut = new List<int>();
                    bool[] visited = new bool[graph.nodes.Count];

                    for (int n = 0; n < graph.nodes.Count; n++)
                    {
                        visited[n] = false;
                    }

                    foreach (int idx in node.edgeIndicesIn)
                    {
                        edgesIn.Add(idx);
                    }
                    for (int i = 0; i < edgesIn.Count; ++i)
                    {
                        int idxIn = edgesIn[i];
                        foreach (int idx in graph.nodes[graph.nodeDict[graph.edges[idxIn].from]].edgeIndicesIn)
                        {

                            if (!visited[graph.nodeDict[graph.edges[idx].from]])
                            {
                                edgesIn.Add(idx);
                                visited[graph.nodeDict[graph.edges[idx].from]] = true;
                            }

                        }


                    }

                    foreach (int idx in node.edgeIndicesOut)
                    {
                        edgesOut.Add(idx);
                    }
                    for (int i = 0; i < edgesOut.Count; ++i)
                    {
                        int idxOut = edgesOut[i];
                        foreach (int idx in graph.nodes[graph.nodeDict[graph.edges[idxOut].to]].edgeIndicesOut)
                        {

                            if (!visited[graph.nodeDict[graph.edges[idx].to]])
                            {
                                edgesOut.Add(idx);
                                visited[graph.nodeDict[graph.edges[idx].to]] = true;
                            }

                        }

                    }

                    List<int> edgeIndices = (edgesIn.Concat<int>(edgesOut).ToList<int>());
                    List<MyEdge> edges = new List<MyEdge>();
                    foreach (int eidx in edgeIndices)
                        edges.Add(graph.edges[eidx]);

                    graph.subEdges = edgeIndices;
                    graph.subObject = TGraph.ReadJSON.BuildEdges(edges, ref graph, graph.edgeObject.GetComponent<MeshRenderer>().sharedMaterial);

                    graph.subObject.name = "subgraph";
                    graph.subObject.transform.parent = this.transform.parent;
                    graph.subObject.transform.localPosition = Vector3.zero;
                    graph.subObject.transform.localEulerAngles = Vector3.zero;
                    Aura = Instantiate(Resources.Load("Aura")) as GameObject;
                    Aura.transform.parent = node.nodeObject.transform;
                    Aura.transform.position = node.pos;

                    //if (GameObject.Find("VR") == null)
                    //    Camera.main.transform.LookAt(node.pos);


                }
                if (!IsCoq) break;
            }

        }


        public static void SetTriangles(int i, int[] triangles)
        {
            int sideCount = 4;
            int vertexCount = 8;
            int n = sideCount * 6;
            int tid = n * i;


            for (int k = 0; k < sideCount; ++k)
            {

                triangles[tid++] = (0 + 2 * k) % vertexCount + i * vertexCount;
                triangles[tid++] = (1 + 2 * k) % vertexCount + i * vertexCount;
                triangles[tid++] = (2 + 2 * k) % vertexCount + i * vertexCount;
                triangles[tid++] = (2 + 2 * k) % vertexCount + i * vertexCount;
                triangles[tid++] = (1 + 2 * k) % vertexCount + i * vertexCount;
                triangles[tid++] = (3 + 2 * k) % vertexCount + i * vertexCount;
            }



        }

        public static void createStraightEdge(int i, Vector3[] vertices, Vector3 sourcePos, Vector3 targetPos, Vector3 offset, Vector3 offsetOrtho)
        {

            vertices[0 + i * 8] = sourcePos + offset + offsetOrtho;
            vertices[1 + i * 8] = targetPos + offset + offsetOrtho;

            vertices[2 + i * 8] = sourcePos + offset - offsetOrtho;
            vertices[3 + i * 8] = targetPos + offset - offsetOrtho;


            vertices[4 + i * 8] = sourcePos - offset - offsetOrtho;
            vertices[5 + i * 8] = targetPos - offset - offsetOrtho;

            vertices[6 + i * 8] = sourcePos - offset + offsetOrtho;
            vertices[7 + i * 8] = targetPos - offset + offsetOrtho;
        }

        public static void createEdge(List<ReadJSON.MyEdge> edges, int i, Vector3[] vertices, Vector3 sourcePos, Vector3 targetPos, Vector3 offset, Vector3 offsetOrtho)
        {

            Vector3 next = 2 * (Quaternion.AngleAxis((360 * edges[i].localIdx), targetPos - sourcePos) * offset);
            if (edges[i].localIdx <= 0) next *= 0;
            createStraightEdge(i, vertices, sourcePos + next, targetPos + next, offset, offsetOrtho);

        }



        public static Color GenerateTargetColor(Color color)
        {

            if (IsMPD) return new Color(0, 100, 0);
            return color / 40 / 3;
        }

        public static Color GenerateOriginColor(Color color)
        {

            if (IsMPD) return new Color(0, 100, 0);
            return (new Color(255, 255, 255) + color * 3) / 4 / 4;
        }

        public static GameObject BuildEdges(List<MyEdge> edges, ref MyGraph graph, Material lineMat)
        {

            var nodes = graph.nodeDict;
            int tubeCount = edges.Count;
            int controlPoints = 1;
            int polyType = 4;

            /* foreach (var edge in graph.edges)
             {
                 //not straight => more tubes
                 if (edge.localIdx > 0)
                     tubeCount +=controlPoints;

             }
             int[] prefixSumArray = new int[tubeCount];
             prefixSumArray[0] = 0;

             for (int i = 0; i < tubeCount; i++)
             {
                 int edgeTubeCount = 1;
                 if (graph.edges[i].localIdx > 0)
                     edgeTubeCount = 1 + controlPoints;
                 prefixSumArray[i + 1] = prefixSumArray[i] + edgeTubeCount;
             }
             */

            Vector3[] vertices = new Vector3[2 * polyType * tubeCount];
            Color[] vertexColors = new Color[2 * polyType * tubeCount];

            int[] triangles = new int[polyType * 6 * tubeCount];

            GameObject line = new GameObject();

            MeshRenderer mr = line.AddComponent<MeshRenderer>();
            MeshFilter mf = line.AddComponent<MeshFilter>();
            Mesh mesh = new Mesh();
            //  Debug.Log(triangles.Length);


            for (int i = 0; i < edges.Count; i++)
            {
                if (nodes.ContainsKey(edges[i].from) && nodes.ContainsKey(edges[i].to))
                {
                    MyNode source = graph.nodes[nodes[edges[i].from]];
                    MyNode target = graph.nodes[nodes[edges[i].to]];

                    Vector3 dir = target.pos - source.pos;

                    Vector3 offset = Vector3.Cross(dir, Vector3.up).normalized * graph.lineWidth;
                    Vector3 offsetOrtho = Vector3.Cross(dir, offset).normalized * graph.lineWidth;

                    //random
                    /*float a = Random.value < .5 ? 1 : -1;
                    float b = Random.value < .5 ? 1 : -1;
                   
                    float alpha = Random.Range(0f, 1f);
                    Vector3 next = 7*(alpha * (a*offset - b*offsetOrtho) + offsetOrtho);
                    */


                    //Debug.Log(edges[i].style);
                    vertexColors[0 + i * 8] = vertexColors[2 + i * 8] = vertexColors[4 + i * 8] = vertexColors[6 + i * 8] = GenerateOriginColor(graph.colorDict[edges[i].style]);
                    vertexColors[1 + i * 8] = vertexColors[3 + i * 8] = vertexColors[5 + i * 8] = vertexColors[7 + i * 8] = GenerateTargetColor(graph.colorDict[edges[i].style]);

                    //creates square tubes by setting vertices manually

                    //  if (edges[i].localIdx > 0)
                    //     Debug.Log(edges[i].localIdx+" "+next * 100+edges[i].from);
                    /*
                    if (edges[i].localIdx > 0)
                        createEdge(graph.edges,i, vertices, source.pos+next, target.pos+next, offset, offsetOrtho);
                    else*/
                    createEdge(graph.edges, i, vertices, source.pos, target.pos, offset, offsetOrtho);
                    SetTriangles(i, triangles);


                    /*
                    if(edges[i].label!=null&& edges[i].label!= "")
                    {
                        edges[i].labelObject = GenLabel(target.nodeObject.transform.GetChild(0), edges[i].label);
                       
                      //  Debug.Log(edges[i].label);
                    }
                    /*
                    if (edges[i].clickText != null)
                    {
                        edges[i].labelObject = GenLabel(target.nodeObject.transform, edges[i].clickText);
                       // edges[i].labelObject.transform.position -= new Vector3(0, -1, 0);
                        Debug.Log(edges[i].clickText);
                    }*/


                }

            }

            mesh.vertices = vertices;
            mesh.triangles = triangles;
            mesh.colors = vertexColors;

            mr.sharedMaterial = lineMat;
            mf.sharedMesh = mesh;

            mesh.RecalculateBounds();

            return line;

        }




        public static GameObject GenLabel(Transform parent, string label, string type)
        {
            GameObject text = (GameObject)Instantiate(Resources.Load("nodeText"));

            text.transform.parent = parent;
            text.GetComponent<TextMesh>().text = label;
            if (type == "o") text.GetComponent<TextMesh>().color = Color.gray;
            text.transform.localPosition = Vector3.zero + new Vector3(0, 0, 1f);
            text.name = label;

            return text;

            /*
            GameObject text = GameObject.CreatePrimitive(PrimitiveType.Quad);
            text.transform.localScale = new Vector3(4, 1, 1);
            text.transform.parent = parent;


            //SpriteRenderer sr = text.AddComponent<SpriteRenderer>() as SpriteRenderer; sr.color = new Color(0.9f, 0.9f, 0.9f, 1.0f);
            //MeshRenderer mr = gameObject.AddComponent<MeshRenderer>() as MeshRenderer;
            int width = testTex.width;
            int height = testTex.height;


            Texture2D tex = new Texture2D(width, height, TextureFormat.Alpha8, false);

            tex.filterMode = FilterMode.Bilinear;
            tex.wrapMode = TextureRWrapMode.Clamp;
            tex.anisoLevel= 9;



            byte[] pixelBuffer = new byte[width * height];

            for (int i = 0; i < width * height; i++)
            {
                pixelBuffer[i] =  (byte)(testTex.GetPixel(i % width, i / width).r*255);

            } tex.LoadRawTextureData(pixelBuffer);
            tex.Apply();



            text.transform.GetComponent<MeshRenderer>().material =new Material(texMat);

            text.transform.GetComponent<MeshRenderer>().material.mainTexture = tex;*/

        }


        void RandomSphere(string name)
        {
            //  GameObject node = GameObject.CreatePrimitive(PrimitiveType.Quad);
            //  node.transform.localScale = new Vector3(4, 1, 1);
            // GameObject node = GameObject.CreatePrimitive(PrimitiveType.Sphere);


            var node = graph.nodes[graph.nodeDict[name]];
            // Debug.Log(node.label+" "+name);
            GameObject nodeObject;
            if (node.style == "model")
            {
                nodeObject = GameObject.CreatePrimitive(PrimitiveType.Cube);
                nodeObject.transform.localScale *= 0.070f;
            }
            else nodeObject = Instantiate(grabbable);
            nodeObject.transform.localScale *= 1.0f;
            // GameObject node = new GameObject();
            // node.AddComponent<AlignText>();
            Vector3 pos = Random.insideUnitSphere * vol;

            node.labelObject = GenLabel(nodeObject.transform, node.label, node.style);

            nodeObject.name = node.label;


            nodeObject.transform.localPosition = pos;
            //node.transform.GetComponent<Renderer>().sharedMaterial = mat;
            graph.nodes[graph.nodeDict[name]].pos = pos;
            graph.nodes[graph.nodeDict[name]].nodeObject = nodeObject;
            nodeObject.transform.parent = this.transform;
            //node.transform.localScale = new Vector3(20, 20, 20);


        }


        bool ProcessNode(string name, int id, MyEdge edge)
        {

            if (graph.nodeDict.ContainsKey(name)) return false;


            //dictionary for converting name to true id
            graph.nodeDict.Add(name, id);



            if (edge != null)
            {
                //Add Nodes that are not already present in orginal data
                //TODO: use label of id
                MyNode tmp = new MyNode();
                tmp.id = name;
                tmp.label = name;
                tmp.nr = graph.nodes.Count;
                tmp.generated = true;
                tmp.radius = edge.targetCount * 10;
                //      Debug.Log(tmp.radius);
                graph.nodes.Add(tmp);


                // Debug.Log(name + "  " + tmp.nr);
            }
            // graph.nodes[id].edgeIndicesIn = new List<int>();

            RandomSphere(name);
            return true;

        }
        void ProcessNodes()
        {

            for (int i = 0; i < graph.nodes.Count; i++)
            {
                //check not required
                if (ProcessNode(graph.nodes[i].id, graph.nodeDict.Count, null))
                {
                    graph.nodes[i].nr = i;
                    // Debug.Log(graph.nodes[i].label + " " + i);
                }


            }


            string json = SVGFile.text;//;
            string[] svgs = JsonUtility.FromJson<SVGCollection>(json).svgs;

            // List<string> tmpMathMLs = new List<string>();
            for (int i = 0; i < graph.nodes.Count; i++)
            {
                if (graph.nodes[i].mathml != null && graph.nodes[i].mathml != "")
                {
                    //tmpMathMLs.Add(graph.nodes[i].mathml);
                    // PData data = new PData();
                    //   data.math = graph.nodes[i].mathml;
                    // StartCoroutine(TestRequest(data, i));
                    Debug.Log(graph.nodes[i].mathml);
                    graph.nodes[i].svg = svgs[i];
                    CreateMathObject(i);
                }

            }
            // JsonUtility.ToJson(tmpMathMLs);





        }


        void ProcessEdges()
        {
            graph.tmpEdges = graph.edges;
            for (int i = 0; i < graph.edges.Count; i++)
            {

                ProcessNode(graph.edges[i].from, graph.nodeDict.Count, graph.edges[i]);
                ProcessNode(graph.edges[i].to, graph.nodeDict.Count, graph.edges[i]);

                if (graph.nodeDict.ContainsKey(graph.edges[i].from) && graph.nodeDict.ContainsKey(graph.edges[i].to))
                {

                    if (onlyInclude && graph.edges[i].style != "graphinclude" && graph.edges[i].style != "include")
                    {
                        graph.edges.RemoveAt(i);
                        i--;
                        //graph.edges[i].active = false;

                    }
                    else

                    {
                        MyNode source = graph.nodes[graph.nodeDict[graph.edges[i].from]];
                        MyNode target = graph.nodes[graph.nodeDict[graph.edges[i].to]];
                        source.edgeIndicesOut.Add(i);
                        target.edgeIndicesIn.Add(i);

                        float weight = 1;
                        graph.edges[i].type = "include";
                        if (graph.edges[i].style != "graphinclude" && graph.edges[i].style != "include")
                        {
                            weight = 0.8f;
                            if (graph.edges[i].style == "graphmeta" || graph.edges[i].style == "meta")
                            {
                                weight = .2f;
                                graph.edges[i].type = "include";
                            }
                            else if (graph.edges[i].style != "structure")
                            {
                                graph.edges[i].type = "";
                            }

                        }
                        source.weights.Add(weight);
                        target.weights.Add(weight);
                        source.outWeights.Add(weight);
                        target.inWeights.Add(weight);
                    }

                }
            }

            foreach (MyNode node in graph.nodes)
            {
                List<int> edgeIndices = (node.edgeIndicesIn.Concat<int>(node.edgeIndicesOut).ToList<int>());

                /* List<Vector2Int> nodeEdgePairs = new List<Vector2Int>(edgeIndices.Count);

                 for(int i = 0; i<edgeIndices.Count;++i)
                 {
                     nodeEdgePairs[i]=new Vector2Int(edgeIndices[i], node.connectedNodes[i]);
                 }*/


                foreach (int eidx in node.edgeIndicesIn)
                {
                    node.connectedNodes.Add(graph.nodeDict[graph.edges[eidx].from]);
                }
                foreach (int eidx in node.edgeIndicesOut)
                {
                    node.connectedNodes.Add(graph.nodeDict[graph.edges[eidx].to]);
                }

                //multiple edges between same two nodes
                var duplicates = node.connectedNodes
                .Select((t, i) => new { Index = i, Nid = t })
                .GroupBy(g => g.Nid)
                .Where(g => g.Count() > 1);

                foreach (var duplicateGroup in duplicates)
                {

                    int k = 0;
                    foreach (var duplicate in duplicateGroup)
                    {
                        if (node.nr != duplicate.Nid && graph.edges[edgeIndices[duplicate.Index]].localIdx == 0)
                            //  graph.edges[edgeIndices[duplicate.Index]].localIdx =
                            k++;

                    }
                    float dnum = k;

                    k = 1;
                    foreach (var duplicate in duplicateGroup)
                    {
                        if (node.nr != duplicate.Nid && graph.edges[edgeIndices[duplicate.Index]].localIdx == 0)
                        {


                            if (duplicate.Index < node.edgeIndicesIn.Count)
                                graph.edges[edgeIndices[duplicate.Index]].localIdx = k / dnum - 0.25f;
                            else
                                graph.edges[edgeIndices[duplicate.Index]].localIdx = Mathf.Repeat((k / dnum) + 0.5f + 0.25f, 1f);



                            k++;

                            Debug.LogWarning(k / dnum + "----" + node.id + " " + duplicateGroup.Count() + " " + duplicate.Index + " " + node.edgeIndicesIn.Count);


                            Debug.Log(graph.edges[edgeIndices[duplicate.Index]].localIdx);

                        }
                        // Debug.Log(node.label +" "+graph.nodes[duplicate.Nid].label + " " + duplicate.Index + " " + graph.edges[edgeIndices[duplicate.Index]].localIdx + " " + graph.edges[edgeIndices[duplicate.Index]].from + " " + graph.edges[edgeIndices[duplicate.Index]].to);
                        //TODO up here

                    }
                }

                //loops

                var idx = 0;
                float same = -1;
                float count = node.connectedNodes.Count(item => item == node.nr);
                // while (idx != -1)
                {
                    idx = node.connectedNodes.IndexOf(node.nr, idx);
                    if (idx != -1)
                    {

                        Debug.Log("SAME");
                        GameObject torus = GameObject.Instantiate(Resources.Load("Torus")) as GameObject;
                        node.nodeObject.transform.Rotate(Vector3.up, 360 * -1f * same / count);
                        torus.transform.parent = node.nodeObject.transform;
                        torus.transform.localPosition = new Vector3(1, 0, 0);
                        torus.transform.localScale = new Vector3(100, 100, 100);
                        torus.GetComponent<Renderer>().material = new Material(mat);
                        torus.GetComponent<Renderer>().material.color =
                        // new Color(20/255f,20/255f,140/255f);
                        graph.colorDict[graph.edges[edgeIndices[idx]].style] / 255f;


                        graph.edges[edgeIndices[idx]].localIdx = (same-- / count);

                        idx++;
                    }
                }

            }



        }


        public void CreateMathObject(int i)
        {
            GameObject mathObject = (GameObject)Instantiate(Resources.Load("mathObject"));

            var parentTransform = graph.nodes[i].labelObject.transform;


            ImportSVG.ImportAsMesh(graph.nodes[i].svg, ref mathObject);
            var y = 0f;
            if (graph.nodes[i].label != "")
            {
                mathObject.transform.parent = parentTransform;
                y -= 50f;
                mathObject.transform.localPosition = new Vector3(-mathObject.GetComponent<MeshRenderer>().bounds.max.x / 2 * 3000, y, 0f);
                mathObject.transform.localScale = Vector3.one * 3000;
            }
            else
            {


                parentTransform.localScale = Vector3.one;
                mathObject.transform.parent = parentTransform;
                mathObject.transform.localPosition = Vector3.zero;
                parentTransform.localPosition = new Vector3(0, 0, 3);
                mathObject.transform.localScale = Vector3.one * 60;
            }

            mathObject.transform.localEulerAngles = new Vector3(180, 0, 0);

        }



        private IEnumerator FinishUpdate()
        {
            var stime = Time.realtimeSinceStartup;

            if (nodePosDict == null)
            {
                NativeArray<float> Energies = new NativeArray<float>(graph.nodes.Count, Allocator.Persistent);
                var handle = Layouts.BaseLayout(0, globalWeight, spaceScale, Energies);
                handle.Complete();

                int k = iterations;
#if UNITY_WEBGL && !UNITY_EDITOR
                k = 2;
                
#endif
                for (int p = 0; p < iterations; p += k)
                {
                    handle = Layouts.UpdateLayout(k, globalWeight, spaceScale);


                    Debug.Log("Begin Layout " + ((Time.realtimeSinceStartup - time)));


                    //   while (!handle.IsCompleted)

                    GlobalVariables.Percent.text = graph.fin.ToString();
#if !UNITY_WEBGL||UNITY_EDITOR

                    do
                    {
                        //GlobalVariables.Percent.text = ((float)(100.0f * (graph.fin)*2 / iterations)).ToString();
                        GlobalVariables.Percent.text = graph.fin.ToString();

                        if (graph.fin > 1)
                        {
                            Layouts.Normalize(spaceScale, true);
                            //Debug.Log((Time.realtimeSinceStartup-time));
                            UpdateAllEdges();
                        }


                        yield return null;
                    } while (!handle.IsCompleted);

#endif

                    handle.Complete();
                    yield return null;
                }

                graph.fin = 0;
                GlobalVariables.Percent.text = "";
                handle.Complete();
                Layouts.Normalize(spaceScale);
                Energies.Dispose();
            }
            else
            {
                Debug.LogWarning("loading layout from file");
                for (int i = 0; i < graph.nodes.Count; i++)
                {
                    var node = graph.nodes[i];
                    if (nodePosDict.ContainsKey(node.id))
                    {
                        var pos = nodePosDict[node.id];
                        node.pos = pos;
                        node.nodeObject.transform.localPosition = pos;
                    }
                    else
                    {
                        node.pos = Vector3.zero;
                        node.nodeObject.transform.localPosition = Vector3.zero;
                    }

                }





            }

            UpdateAllEdges();
            Debug.Log(Time.realtimeSinceStartup - stime);

            if (!XRSettings.enabled) GameObject.Find("DebugCamera").GetComponent<Gestures>().Init();



        }


        private IEnumerator FinishInit()
        {
            Layouts.Init(TwoD);
            Layouts.Spiral();

            graph.edgeObject = BuildEdges(graph.edges, ref graph, lineMat);
            graph.edgeObject.transform.parent = transform.parent;
            graph.edgeObject.name = "EdgeMesh";
            if (!IsCoq) UIInteracton.SEnableEdgeType("meta");
            //  graph.edgeObject.SetActive(false);

            // yield return null;

            yield return FinishUpdate();


            GlobalVariables.Solved = true;
            this.GetComponent<Interaction>().enabled = true;
            GlobalVariables.Init = true;
            this.GetComponent<GlobalAlignText>().childCount = this.transform.childCount;
            //     graph.Positions.Dispose();
            //    graph.Disps.Dispose();

            /*    nodePosDict = new Dictionary<string, Vector3>();
          foreach(var node in graph.nodes)
             {
                 nodePosDict.Add(node.id, node.pos);
             }*/


            Debug.Log("Finished init " + ((Time.realtimeSinceStartup - time)));
            //graph.edgeObject.SetActive(true);





        }






        IEnumerator LoadLayout(WWW www)
        {
            if (www == null)
            {
                yield return null;
            }

            else
                yield return www;

            if (www != null && www.error == null)
            {
                Debug.Log("WWW Ok!: " + www.text);
                var json = www.text;
                var nodePosArray = JSONDict.CreateFromJSON(json).keysAndPositions;
                nodePosDict = new Dictionary<string, Vector3>();
                foreach(var idAndPos in nodePosArray)
                {
                    nodePosDict.Add(idAndPos.id, idAndPos.pos);
                }

            }
            else if (www != null)
            {
                Debug.Log(www.error);
            }

        
        }


        public void RecalculateLayout()
        {
         
            Debug.Log("urls: "+url + " " + GlobalVariables.Url);
            Debug.Log(si + " " + GlobalVariables.SelectionIndex);
            if (URLObject.GetComponent<InputField>().text != "")
            {
                GlobalVariables.SelectionIndex = -1;
                GlobalVariables.Url = "https://mmt.mathhub.info/:jgraph/json?key=archivegraph&uri=" + URLObject.GetComponent<InputField>().text;
            }

           if( GlobalVariables.Path != path)
            {
                GlobalVariables.SelectionIndex = -1;
            }



            if (!GlobalVariables.Init)
            {
                LoadGraph();
            }
     
            else if ((GlobalVariables.SelectionIndex!=-1&&si != GlobalVariables.SelectionIndex)||GlobalVariables.Url!=url||GlobalVariables.Path!=path)
            {
              
                Debug.Log("new graph, reload scene");
                GlobalVariables.Init = false;
                GlobalVariables.Reload = true;
                SceneManager.LoadScene(SceneManager.GetActiveScene().buildIndex);
                Debug.Log("after reload");
            }
            else
            {
                Debug.Log("update layout");
                StartCoroutine(FinishUpdate());
            }

        }

        private void UpdateAllEdges()
        {
            Mesh bigMesh = graph.edgeObject.GetComponent<MeshFilter>().sharedMesh;
            Vector3[] bigVertices = bigMesh.vertices;
            for (int i = 0; i < graph.edges.Count; i++)
            {
                var sourcePos = graph.nodes[graph.nodeDict[graph.edges[i].from]].nodeObject.transform.localPosition;
                var targetPos = graph.nodes[graph.nodeDict[graph.edges[i].to]].nodeObject.transform.localPosition;
                Vector3 dir = targetPos - sourcePos;
                Vector3 offset = Vector3.Cross(dir, Vector3.up).normalized * graph.lineWidth;
                Vector3 offsetOrtho = Vector3.Cross(dir, offset).normalized * graph.lineWidth;
                ReadJSON.createEdge(graph.edges, i, bigVertices, sourcePos, targetPos, offset, offsetOrtho);
            }
            bigMesh.vertices = bigVertices;
            bigMesh.RecalculateBounds();
        }
        public static void UpdateEdgesLite(MyNode node, ReadJSON.MyGraph graph)
        {


            Mesh bigMesh = graph.edgeObject.GetComponent<MeshFilter>().sharedMesh;
            Vector3[] bigVertices = bigMesh.vertices;


            Vector3 targetPos = node.nodeObject.transform.localPosition;
            Vector3 sourcePos;

            for (int i = 0; i < node.edgeIndicesIn.Count; i++)
            {
                sourcePos = graph.nodes[graph.nodeDict[graph.edges[node.edgeIndicesIn[i]].from]].nodeObject.transform.localPosition;

                Vector3 dir = targetPos - sourcePos;
                Vector3 offset = Vector3.Cross(dir, Vector3.up).normalized * graph.lineWidth;
                Vector3 offsetOrtho = Vector3.Cross(dir, offset).normalized * graph.lineWidth;
                ReadJSON.createEdge(graph.edges, node.edgeIndicesIn[i], bigVertices, sourcePos, targetPos, offset, offsetOrtho);
            }

            sourcePos = targetPos;
            for (int i = 0; i < node.edgeIndicesOut.Count; i++)
            {
                targetPos = graph.nodes[graph.nodeDict[graph.edges[node.edgeIndicesOut[i]].to]].nodeObject.transform.localPosition;

                Vector3 dir = targetPos - sourcePos;
                Vector3 offset = Vector3.Cross(dir, Vector3.up).normalized * graph.lineWidth;
                Vector3 offsetOrtho = Vector3.Cross(dir, offset).normalized * graph.lineWidth;
                ReadJSON.createEdge(graph.edges, node.edgeIndicesOut[i], bigVertices, sourcePos, targetPos, offset, offsetOrtho);
            }

            bigMesh.vertices = bigVertices;
            bigMesh.RecalculateBounds();
            if (graph.subObject != null)
            {

                Mesh subMesh = graph.subObject.GetComponent<MeshFilter>().sharedMesh;

                Vector3[] subVertices = subMesh.vertices;
                int k = 0;
                foreach (int eid in graph.subEdges)
                {
                    for (int v = 0; v < 8; v++)
                    {
                        subVertices[k++] = bigVertices[eid * 8 + v];
                    }

                }
                subMesh.vertices = subVertices;
                subMesh.RecalculateBounds();
            }

        }


        private void UpdateEdgesFull(MyNode node)
        {

            Mesh mesh = node.nodeEdgeObject.GetComponent<MeshFilter>().sharedMesh;
            Vector3[] vertices = mesh.vertices;



            Mesh bigMesh = graph.edgeObject.GetComponent<MeshFilter>().sharedMesh;
            Vector3[] bigVertices = bigMesh.vertices;


            Vector3 targetPos = node.nodeObject.transform.localPosition;
            Vector3 sourcePos;

            for (int i = 0; i < node.edgeIndicesIn.Count; i++)
            {
                sourcePos = graph.nodes[graph.nodeDict[graph.edges[node.edgeIndicesIn[i]].from]].nodeObject.transform.localPosition;

                Vector3 dir = targetPos - sourcePos;
                Vector3 offset = Vector3.Cross(dir, Vector3.up).normalized * graph.lineWidth;
                Vector3 offsetOrtho = Vector3.Cross(dir, offset).normalized * graph.lineWidth;

                ReadJSON.createEdge(graph.edges, node.edgeIndicesIn[i], bigVertices, sourcePos, targetPos, offset, offsetOrtho);
                ReadJSON.createEdge(graph.edges, i, vertices, sourcePos, targetPos, offset, offsetOrtho);
            }

            sourcePos = targetPos;
            for (int i = 0; i < node.edgeIndicesOut.Count; i++)
            {

                targetPos = graph.nodes[graph.nodeDict[graph.edges[node.edgeIndicesOut[i]].to]].nodeObject.transform.localPosition;

                Vector3 dir = targetPos - sourcePos;
                Vector3 offset = Vector3.Cross(dir, Vector3.up).normalized * graph.lineWidth;
                Vector3 offsetOrtho = Vector3.Cross(dir, offset).normalized * graph.lineWidth;

                ReadJSON.createEdge(graph.edges, node.edgeIndicesOut[i], bigVertices, sourcePos, targetPos, offset, offsetOrtho);
                ReadJSON.createEdge(graph.edges, i + node.edgeIndicesIn.Count, vertices, sourcePos, targetPos, offset, offsetOrtho);
            }


            mesh.vertices = vertices;
            mesh.RecalculateBounds();

            bigMesh.vertices = bigVertices;
            bigMesh.RecalculateBounds();

            if (graph.subObject != null)
            {

                Mesh subMesh = graph.subObject.GetComponent<MeshFilter>().sharedMesh;

                Vector3[] subVertices = subMesh.vertices;
                int k = 0;
                foreach (int eid in graph.subEdges)
                {
                    for (int v = 0; v < 8; v++)
                    {
                        subVertices[k++] = bigVertices[eid * 8 + v];
                    }

                }
                subMesh.vertices = subVertices;
                subMesh.RecalculateBounds();
            }


        }

        //if not known if selected EdgeObjects are active
        private void UpdateEdges(MyNode node)
        {

            if (node.nodeEdgeObject != null)
            {
                UpdateEdgesFull(node);
            }
            else
            {
                UpdateEdgesLite(node, graph);
            }
        }

        private void UpdateMoving()
        {
            foreach (int n in graph.selectedNodes)
            {
                if (n == -1) continue; //TODO: change this
                var node = graph.nodes[n];
                GlobalVariables.Graph.nodes[n].pos = node.nodeObject.transform.localPosition;
                //   Debug.Log(node.nodeObject.transform.localPosition);
                UpdateEdges(node);
            }
        }

        private void UpdateSelected()
        {
            foreach (int n in graph.selectedNodes)
            {
                if (n == -1) continue; //TODO: change this
                var node = graph.nodes[n];
                UpdateEdges(node);
            }
        }